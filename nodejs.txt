=> blocking / non blocking and synchronous and asynchronous
Event driven
Back to the definition from Node’s website: Node is an asynchronous event driven JavaScript runtime. In this context asynchronous means that when you write your code you do not try to predict the exact sequence in which every line will run. Instead you write your code as a collection of smaller functions that get called in response to specific events such as a network request (event driven).

For example, let’s say you are writing a program and you need it to do the following. It should read some text from a file, print that text to the console, query a database for a list of users and filter the users based on their age.

Instead of telling your code to do those steps sequentially like so:

Read File
Print File Contents
Query Database
Filter Database Query results
You can break up the task like so:

Read File AND THEN Print File Contents
Query Database AND THEN Filter Database Query Results.
When you run this program Node will start at the top and begin reading the file but since that is an action that takes some time it will immediately begin running the second step (querying the database) while it’s waiting on the file to finish reading.

While both of these processes are running, Node sits and waits on an event. In this case, it is waiting on the completion of both processes, the reading of a file and the database query. When either of these tasks are finished, Node will fire off an event that will run the next function we’ve defined. So if the read-file process finishes first, it will print the file contents. If the database query finishes first, it will start the filtering process. As the programmer, we don’t know or care which order the two processes are going to be completed. If this code was processed synchronously (rather than asynchronously) we would have to wait for each step in the program before moving on to the next one, which could cause things to slow down considerably. If the file that we needed to read was really long then we might have to wait a few seconds before the database query could begin.


=> installation of nodejs and nvm

=> When you install a JS drag-and-drop package in your React app
It is a dependency because your app depends on it.
It is a library because it provides reusable code.
It may also be considered a plugin if it extends the functionality of another system or framework (like React).

=> Builtin Globals in Node
Global variables in NodeJS are variables that can be declared with a value, and which can be accessed anywhere in a program. The scope of global variables is not limited to the function scope or any particular JavaScript file. It can be declared in one place and then used in multiple places. 
Node js has a number of inbuilt globals like any other javascript framework. These inbuilt globals help us to develop any kind of new feature without writing much logic in our program. By using these built-in globals, we just need to call these predefined functions with proper parameters
e.g console, global, setTimeout , setInterval etc

=> Concept of Module system
A module system is a way to organize and structure code into separate, reusable blocks or "modules," which can be easily loaded, reused, and maintained. Modules encapsulate functionality, such as variables, functions, and classes, and export them so they can be imported into other parts of an application. This approach helps avoid code duplication, makes code more maintainable, and promotes reuse across different parts of a project or even across different projects.
 #common js 
  It uses module.export to export functions, objects , variables
  uses 	require() to import
  Default

 #ecma6
 It uses export , named export and import statement
 To use ecma6 module system we have to Save the file with .mjs extension, or
 Add { "type": "module" } in the nearest package.json
 For React (Frontend): No additional setup is needed. ES6+ is supported out of the box in modern React environments (like   Create React App).

=============> Important Built in Modules


 
